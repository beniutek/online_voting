var search_data = {"index":{"searchIndex":["applicationcontroller","applicationrecord","counterclient","counterclienterror","datasigner","adminsignatureerror","datasignerresult","voter","votescontroller","config()","new()","new()","send_vote()","sign()","sign_vote()","to_h()","to_s()","unblind_message()","verify()","readme","readme","rdoc.rake"],"longSearchIndex":["applicationcontroller","applicationrecord","counterclient","counterclient::counterclienterror","datasigner","datasigner::adminsignatureerror","datasignerresult","voter","votescontroller","voter#config()","counterclient::new()","datasigner::new()","counterclient#send_vote()","votescontroller#sign()","datasigner#sign_vote()","datasignerresult#to_h()","datasignerresult#to_s()","datasigner#unblind_message()","datasigner#verify()","","",""],"info":[["ApplicationController","","classes/ApplicationController.html","",""],["ApplicationRecord","","classes/ApplicationRecord.html","",""],["CounterClient","","classes/CounterClient.html","","<p>This class represents a client that can make requests and receive response from the counter module\n"],["CounterClient::CounterClientError","","classes/CounterClient/CounterClientError.html","",""],["DataSigner","","classes/DataSigner.html","","<p>DataSigner is responsible for handling messages. This includes encryption, blinding, signing the message …\n"],["DataSigner::AdminSignatureError","","classes/DataSigner/AdminSignatureError.html","","<p>This error is thrown if admin returns an empty/error message or if we detect that the signed message …\n"],["DataSignerResult","","classes/DataSignerResult.html","",""],["Voter","","classes/Voter.html","",""],["VotesController","","classes/VotesController.html","","<p>Votes controller is responsible for handling requests made to /votes Full API documentation can be found …\n"],["config","Voter","classes/Voter.html#method-i-config","()",""],["new","CounterClient","classes/CounterClient.html#method-c-new","(client = RestClient, uri = Voter.config.counter_module_uri)","<p>Parameters:\n<p>client &mdash; Basically an object that is able to make post requests, RestClient by default\n<p>uri &mdash; string …\n"],["new","DataSigner","classes/DataSigner.html#method-c-new","(private_key: nil, encryptor: OnlineVoting::Crypto::Message, signer: OnlineVoting::Crypto::BlindSigner, admin_client: OnlineVoting::AdminClient)","<p>Parameters:\n<p>private_key &mdash; Must be an RSA 512 bit length private key (string)\n<p>encryptor &mdash; object that can respond …\n"],["send_vote","CounterClient","classes/CounterClient.html#method-i-send_vote","(signed_message, bit_commitment)","<p>Parameters:\n<p>signed_message &mdash; Any kind of string, represents a bit commitment that was signed by administrator …\n"],["sign","VotesController","classes/VotesController.html#method-i-sign","()",""],["sign_vote","DataSigner","classes/DataSigner.html#method-i-sign_vote","(message, voter_id, key = nil, iv = nil)","<p>Parameters:\n<p>message &mdash; must be a string. Becuase of current limitation a string of max 23 bytes\n<p>encryptor … &mdash; "],["to_h","DataSignerResult","classes/DataSignerResult.html#method-i-to_h","()",""],["to_s","DataSignerResult","classes/DataSignerResult.html#method-i-to_s","()",""],["unblind_message","DataSigner","classes/DataSigner.html#method-i-unblind_message","(signed_message, r, signing_key = admin_key)","<p>Parameters:\n<p>signed_message &mdash; message that was blinded and signed\n<p>r &mdash; blinding factor that was used to blind …\n"],["verify","DataSigner","classes/DataSigner.html#method-i-verify","(signed_message, message, signing_key = admin_key)","<p>Parameters:\n<p>signed_message &mdash; message that was blinded and signed\n<p>message &mdash; original message\n"],["README","","files/README_md.html","","<p>README\n<p>Voter module is basically a helper for a voter.\n<p>So that he won&#39;t have to do all the complicated …\n"],["README","","files/README_rdoc.html","","<p>README\n<p>Voter module is basically a helper for a voter.\n<p>So that he won&#39;t have to do all the complicated …\n"],["rdoc.rake","","files/lib/tasks/rdoc_rake.html","","<p># Rakefile require &#39;sdoc&#39; # and use your RDoc task the same way you used it before require &#39;rdoc/task&#39; …\n"]]}}