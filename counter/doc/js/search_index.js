var search_data = {"index":{"searchIndex":["apicontroller","applicationcontroller","applicationrecord","candidate","candidatescontroller","counter","customserializer","result","resultscontroller","user","vote","voteserializer","voteservice","adminphaseinprogresserror","votescontroller","all_accounted_for_votes()","as_json()","attributes()","client()","config()","count_vote()","create()","get_results()","has_correct_signature?()","index()","index()","index()","new()","open()","open_vote()","rsa()","should_be_counted?()","to_h()","to_json()","voting_first_time?()","readme","readme","rdoc.rake"],"longSearchIndex":["apicontroller","applicationcontroller","applicationrecord","candidate","candidatescontroller","counter","customserializer","result","resultscontroller","user","vote","voteserializer","voteservice","voteservice::adminphaseinprogresserror","votescontroller","voteservice#all_accounted_for_votes()","customserializer#as_json()","customserializer::attributes()","voteservice#client()","counter#config()","voteservice#count_vote()","votescontroller#create()","result::get_results()","voteservice#has_correct_signature?()","candidatescontroller#index()","resultscontroller#index()","votescontroller#index()","customserializer::new()","votescontroller#open()","voteservice#open_vote()","voteservice#rsa()","voteservice#should_be_counted?()","customserializer#to_h()","customserializer#to_json()","voteservice#voting_first_time?()","","",""],"info":[["ApiController","","classes/ApiController.html","",""],["ApplicationController","","classes/ApplicationController.html","",""],["ApplicationRecord","","classes/ApplicationRecord.html","",""],["Candidate","","classes/Candidate.html","","<p>Schema Information\n<p>Table name: candidates\n\n<pre><code>id          :bigint           not null, primary key\nuuid     ...\n</code></pre>\n"],["CandidatesController","","classes/CandidatesController.html","","<p>Candidates controller is responsible for handling requests made to /votes Full API documentation can …\n"],["Counter","","classes/Counter.html","",""],["CustomSerializer","","classes/CustomSerializer.html","","<p>Very simple serializer for resoucers Example implementation can be seen in VoteSerializer\n"],["Result","","classes/Result.html","","<p>Schema Information\n<p>Table name: results\n\n<pre><code>id         :bigint           not null, primary key\nresult     :jsonb ...\n</code></pre>\n"],["ResultsController","","classes/ResultsController.html","","<p>Results controller is responsible for handling requests made to /votes Full API documentation can be …\n"],["User","","classes/User.html","","<p>Schema Information\n<p>Table name: users\n\n<pre><code>id                     :bigint           not null, primary key\nemail ...\n</code></pre>\n"],["Vote","","classes/Vote.html","","<p>Schema Information\n<p>Table name: votes\n\n<pre><code>id             :bigint           not null, primary key\nuuid       ...\n</code></pre>\n"],["VoteSerializer","","classes/VoteSerializer.html","","<p>Schema Information\n<p>Table name: votes\n\n<pre><code>id             :bigint           not null, primary key\nuuid       ...\n</code></pre>\n"],["VoteService","","classes/VoteService.html","","<p>This class is responsible for opening and counting votes send by the voter Each vote should be signed …\n"],["VoteService::AdminPhaseInProgressError","","classes/VoteService/AdminPhaseInProgressError.html","",""],["VotesController","","classes/VotesController.html","","<p>Votes controller is responsible for handling requests made to /votes Full API documentation can be found …\n"],["all_accounted_for_votes","VoteService","classes/VoteService.html#method-i-all_accounted_for_votes","()",""],["as_json","CustomSerializer","classes/CustomSerializer.html#method-i-as_json","()",""],["attributes","CustomSerializer","classes/CustomSerializer.html#method-c-attributes","(*attrs)",""],["client","VoteService","classes/VoteService.html#method-i-client","()",""],["config","Counter","classes/Counter.html#method-i-config","()",""],["count_vote","VoteService","classes/VoteService.html#method-i-count_vote","(signature:, message:)","<p>Parameters:\n<p>signature &mdash; This is the admin signature of the message\n<p>message &mdash; This is the original message\n"],["create","VotesController","classes/VotesController.html#method-i-create","()",""],["get_results","Result","classes/Result.html#method-c-get_results","()","<p>Returns:\n<p>a result object\n"],["has_correct_signature?","VoteService","classes/VoteService.html#method-i-has_correct_signature-3F","(message, signature)",""],["index","CandidatesController","classes/CandidatesController.html#method-i-index","()",""],["index","ResultsController","classes/ResultsController.html#method-i-index","()",""],["index","VotesController","classes/VotesController.html#method-i-index","()",""],["new","CustomSerializer","classes/CustomSerializer.html#method-c-new","(resource)",""],["open","VotesController","classes/VotesController.html#method-i-open","()",""],["open_vote","VoteService","classes/VoteService.html#method-i-open_vote","(uuid, key, iv)","<p>Parameters:\n<p>uuid &mdash; This is identifier of the vote\n<p>key &mdash; This is key which was used by the voter to make a bit …\n"],["rsa","VoteService","classes/VoteService.html#method-i-rsa","()",""],["should_be_counted?","VoteService","classes/VoteService.html#method-i-should_be_counted-3F","(message, signature)",""],["to_h","CustomSerializer","classes/CustomSerializer.html#method-i-to_h","()",""],["to_json","CustomSerializer","classes/CustomSerializer.html#method-i-to_json","()",""],["voting_first_time?","VoteService","classes/VoteService.html#method-i-voting_first_time-3F","(bit_commitment, signed_message)",""],["README","","files/README_md.html","","<p>README\n<p>This README would normally document whatever steps are necessary to get the\napplication up and ...\n"],["README","","files/README_rdoc.html","","<p>README\n<p>Counter module is responsible for counting and presenting the votes to all voters\n<p>Building the project …\n"],["rdoc.rake","","files/lib/tasks/rdoc_rake.html","","<p># Rakefile require &#39;sdoc&#39; # and use your RDoc task the same way you used it before require &#39;rdoc/task&#39; …\n"]]}}